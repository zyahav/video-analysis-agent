{
  "version": 3,
  "sources": ["../bundle-nZ7DK4/strip-cf-connecting-ip-header.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/xstate/dev/dist/xstate-dev.cjs.js", "../../../node_modules/xstate/dist/raise-5872b9e8.cjs.js", "../../../node_modules/xstate/actors/dist/xstate-actors.cjs.js", "../../../node_modules/xstate/dist/log-fa2e731a.cjs.js", "../../../node_modules/xstate/dist/xstate.cjs.js", "../bundle-nZ7DK4/middleware-loader.entry.ts", "../bundle-nZ7DK4/middleware-insertion-facade.js", "../../../src/index.js", "../../../node_modules/hono/dist/index.js", "../../../node_modules/hono/dist/hono.js", "../../../node_modules/hono/dist/hono-base.js", "../../../node_modules/hono/dist/compose.js", "../../../node_modules/hono/dist/context.js", "../../../node_modules/hono/dist/request.js", "../../../node_modules/hono/dist/utils/body.js", "../../../node_modules/hono/dist/utils/url.js", "../../../node_modules/hono/dist/utils/html.js", "../../../node_modules/hono/dist/router.js", "../../../node_modules/hono/dist/utils/constants.js", "../../../node_modules/hono/dist/router/reg-exp-router/index.js", "../../../node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/hono/dist/router/smart-router/index.js", "../../../node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/hono/dist/router/trie-router/index.js", "../../../node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/hono/dist/router/trie-router/node.js", "../../../agent.json", "../../../src/machine.js", "../../../node_modules/xstate/dist/xstate.cjs.mjs", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/.wrangler/tmp/dev-myxSms",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n}\nfunction getDevTools() {\n  const w = getGlobal();\n  if (w.__xstate__) {\n    return w.__xstate__;\n  }\n  return undefined;\n}\nfunction registerService(service) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n}\nconst devToolsAdapter = service => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n};\n\nexports.devToolsAdapter = devToolsAdapter;\nexports.getGlobal = getGlobal;\nexports.registerService = registerService;\n", "'use strict';\n\nvar dev_dist_xstateDev = require('../dev/dist/xstate-dev.cjs.js');\n\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldn't start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\n\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst XSTATE_INIT = 'xstate.init';\nconst XSTATE_ERROR = 'xstate.error';\nconst XSTATE_STOP = 'xstate.stop';\n\n/**\n * Returns an event that represents an implicit event that is sent after the\n * specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction createAfterEvent(delayRef, id) {\n  return {\n    type: `xstate.after.${delayRef}.${id}`\n  };\n}\n\n/**\n * Returns an event that represents that a final state node has been reached in\n * the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction createDoneStateEvent(id, output) {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state\n * node, but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction createDoneActorEvent(invokeId, output) {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output,\n    actorId: invokeId\n  };\n}\nfunction createErrorActorEvent(id, error) {\n  return {\n    type: `xstate.error.actor.${id}`,\n    error,\n    actorId: id\n  };\n}\nfunction createInitEvent(input) {\n  return {\n    type: XSTATE_INIT,\n    input\n  };\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate\n * macrotask. It allows those errors to be detected by global error handlers and\n * reported to bug tracking services without interrupting our own stack of\n * execution.\n *\n * @param err Error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n  const result = [];\n  let segment = '';\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n  result.push(segment);\n  return result;\n}\nfunction toStateValue(stateValue) {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction resolveOutput(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  return mapper;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorActorEvent(event) {\n  return event.type.startsWith('xstate.error.actor');\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${index}.${stateNodeId}`;\n}\nfunction resolveReferencedActor(machine, src) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke;\n  return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;\n}\nfunction getAllOwnEventDescriptors(snapshot) {\n  return [...new Set([...snapshot._nodes.flatMap(sn => sn.ownEvents)])];\n}\n\nfunction createScheduledEventId(actorRef, id) {\n  return `${actorRef.sessionId}.${id}`;\n}\nlet idCounter = 0;\nfunction createSystem(rootActor, options) {\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const inspectionObservers = new Set();\n  const timerMap = {};\n  const {\n    clock,\n    logger\n  } = options;\n  const scheduler = {\n    schedule: (source, target, event, delay, id = Math.random().toString(36).slice(2)) => {\n      const scheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n        system._relay(source, target, event);\n      }, delay);\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n      if (timeout !== undefined) {\n        clock.clearTimeout(timeout);\n      }\n    },\n    cancelAll: actorRef => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n  const sendInspectionEvent = event => {\n    if (!inspectionObservers.size) {\n      return;\n    }\n    const resolvedInspectionEvent = {\n      ...event,\n      rootId: rootActor.sessionId\n    };\n    inspectionObservers.forEach(observer => observer.next?.(resolvedInspectionEvent));\n  };\n  const system = {\n    _snapshot: {\n      _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.add(observer);\n      return {\n        unsubscribe() {\n          inspectionObservers.delete(observer);\n        }\n      };\n    },\n    _sendInspectionEvent: sendInspectionEvent,\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: {\n          ...system._snapshot._scheduledEvents\n        }\n      };\n    },\n    start: () => {\n      const scheduledEvents = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvents) {\n        const {\n          source,\n          target,\n          event,\n          delay,\n          id\n        } = scheduledEvents[scheduledId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    },\n    _clock: clock,\n    _logger: logger\n  };\n  return system;\n}\n\n// those are needed to make JSDoc `@link` work properly\n\nlet executingCustomAction = false;\nconst $$ACTOR_TYPE = 1;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nlet ProcessingStatus = /*#__PURE__*/function (ProcessingStatus) {\n  ProcessingStatus[ProcessingStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ProcessingStatus[ProcessingStatus[\"Running\"] = 1] = \"Running\";\n  ProcessingStatus[ProcessingStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ProcessingStatus;\n}({});\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change\n * its behavior based on the events it receives, which can cause effects outside\n * of the actor. When you run a state machine, it becomes an actor.\n */\nclass Actor {\n  /**\n   * Creates a new actor instance for the given logic with the provided options,\n   * if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    /** The current internal state of the actor. */\n    this._snapshot = void 0;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as\n     * delayed events and transitions.\n     */\n    this.clock = void 0;\n    this.options = void 0;\n    /** The unique identifier for this actor relative to its parent. */\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.observers = new Set();\n    this.eventListeners = new Map();\n    this.logger = void 0;\n    /** @internal */\n    this._processingStatus = ProcessingStatus.NotStarted;\n    // Actor Ref\n    this._parent = void 0;\n    /** @internal */\n    this._syncSnapshot = void 0;\n    this.ref = void 0;\n    // TODO: add typings for system\n    this._actorScope = void 0;\n    this._systemId = void 0;\n    /** The globally unique process ID for this invocation. */\n    this.sessionId = void 0;\n    /** The system to which this actor belongs. */\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    // array of functions to defer\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      syncSnapshot,\n      id,\n      systemId,\n      inspect\n    } = resolvedOptions;\n    this.system = parent ? parent.system : createSystem(this, {\n      clock,\n      logger\n    });\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = options?.logger ?? this.system._logger;\n    this.clock = options?.clock ?? this.system._clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      },\n      emit: emittedEvent => {\n        const listeners = this.eventListeners.get(emittedEvent.type);\n        const wildcardListener = this.eventListeners.get('*');\n        if (!listeners && !wildcardListener) {\n          return;\n        }\n        const allListeners = [...(listeners ? listeners.values() : []), ...(wildcardListener ? wildcardListener.values() : [])];\n        for (const handler of allListeners) {\n          handler(emittedEvent);\n        }\n      },\n      actionExecutor: action => {\n        const exec = () => {\n          this._actorScope.system._sendInspectionEvent({\n            type: '@xstate.action',\n            actorRef: this,\n            action: {\n              type: action.type,\n              params: action.params\n            }\n          });\n          if (!action.exec) {\n            return;\n          }\n          const saveExecutingCustomAction = executingCustomAction;\n          try {\n            executingCustomAction = true;\n            action.exec(action.info, action.params);\n          } finally {\n            executingCustomAction = saveExecutingCustomAction;\n          }\n        };\n        if (this._processingStatus === ProcessingStatus.Running) {\n          exec();\n        } else {\n          this._deferred.push(exec);\n        }\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this._initState(options?.snapshot ?? options?.state);\n    if (systemId && this._snapshot.status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n  _initState(persistedState) {\n    try {\n      this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      };\n    }\n  }\n  update(snapshot, event) {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...snapshot,\n          status: 'error',\n          error: err\n        };\n      }\n    }\n    switch (this._snapshot.status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n        break;\n      case 'error':\n        this._error(this._snapshot.error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor\u2019s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor\u2019s snapshot value when it is emitted.\n   * The observer can be:\n   *\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest\n   *   snapshot\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   }\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object\n   * that has an `.unsubscribe()` method. You can call\n   * `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be\n   * unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest\n   *   snapshot, or an observer object whose `.next(snapshot)` method receives\n   *   the latest snapshot\n   */\n\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch (this._snapshot.status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error':\n          {\n            const err = this._snapshot.error;\n            if (!observer.error) {\n              reportUnhandledError(err);\n            } else {\n              try {\n                observer.error(err);\n              } catch (err) {\n                reportUnhandledError(err);\n              }\n            }\n            break;\n          }\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n  on(type, handler) {\n    let listeners = this.eventListeners.get(type);\n    if (!listeners) {\n      listeners = new Set();\n      this.eventListeners.set(type, listeners);\n    }\n    const wrappedHandler = handler.bind(undefined);\n    listeners.add(wrappedHandler);\n    return {\n      unsubscribe: () => {\n        listeners.delete(wrappedHandler);\n      }\n    };\n  }\n\n  /** Starts the Actor from the initial state */\n  start() {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: snapshot => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n    const status = this._snapshot.status;\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._snapshot, initEvent);\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error(this._snapshot.error);\n        return this;\n    }\n    if (!this._parent) {\n      this.system.start();\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...this._snapshot,\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._snapshot, event, this._actorScope);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._snapshot = {\n        ...this._snapshot,\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: XSTATE_STOP\n    });\n    return this;\n  }\n\n  /** Stops the Actor and unsubscribe all listeners. */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _reportError(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _error(err) {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  _stopProcedure() {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /** @internal */\n  _send(event) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    this.system._relay(undefined, this, event);\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : dev_dist_xstateDev.devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from\n   * {@link Actor.getSnapshot}. Persisted state represents the internal state of\n   * the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   * @see https://stately.ai/docs/persistence\n   */\n\n  getPersistedSnapshot(options) {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n\n  /**\n   * Read an actor\u2019s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change. An actor\n   * may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with\n   * `fromCallback`, will not emit snapshots.\n   * @see {@link Actor.subscribe} to subscribe to an actor\u2019s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  getSnapshot() {\n    return this._snapshot;\n  }\n}\n/**\n * Creates a new actor instance for the given actor logic with the provided\n * options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you\n * implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that\n * actor system.\n * @example\n *\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine\n *   actor logic creator, see {@link createMachine}. Other actor logic creators\n *   include {@link fromCallback}, {@link fromEventObservable},\n *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nfunction createActor(logic, ...[options]) {\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided\n * options, if any.\n *\n * @deprecated Use `createActor` instead\n * @alias\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n * @alias\n */\n\nfunction resolveCancel(_, snapshot, actionArgs, actionParams, {\n  sendId\n}) {\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, {\n    sendId: resolvedSendId\n  }, undefined];\n}\nfunction executeCancel(actorScope, params) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, params.sendId);\n  });\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The\n * canceled `sendTo(...)` action will not send its event or execute, unless the\n * `delay` has already elapsed before `cancel(...)` is called.\n *\n * @example\n *\n * ```ts\n * import { createMachine, sendTo, cancel } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     sendEvent: {\n *       actions: sendTo(\n *         'some-actor',\n *         { type: 'someEvent' },\n *         {\n *           id: 'some-id',\n *           delay: 1000\n *         }\n *       )\n *     },\n *     cancelEvent: {\n *       actions: cancel('some-id')\n *     }\n *   }\n * });\n * ```\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(_args, _params) {\n  }\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n  return cancel;\n}\n\nfunction resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, {\n  id,\n  systemId,\n  src,\n  input,\n  syncSnapshot\n}) {\n  const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n  let actorRef;\n  let resolvedInput = undefined;\n  if (logic) {\n    resolvedInput = typeof input === 'function' ? input({\n      context: snapshot.context,\n      event: actionArgs.event,\n      self: actorScope.self\n    }) : input;\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input: resolvedInput\n    });\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children: {\n      ...snapshot.children,\n      [resolvedId]: actorRef\n    }\n  }), {\n    id,\n    systemId,\n    actorRef,\n    src,\n    input: resolvedInput\n  }, undefined];\n}\nfunction executeSpawn(actorScope, {\n  actorRef\n}) {\n  if (!actorRef) {\n    return;\n  }\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\nfunction spawnChild(...[src, {\n  id,\n  systemId,\n  input,\n  syncSnapshot = false\n} = {}]) {\n  function spawnChild(_args, _params) {\n  }\n  spawnChild.type = 'xstate.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n  return spawnChild;\n}\n\nfunction resolveStop(_, snapshot, args, actionParams, {\n  actorRef\n}) {\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children\n  }), resolvedActorRef, undefined];\n}\nfunction executeStop(actorScope, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nfunction stopChild(actorRef) {\n  function stop(_args, _params) {\n  }\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n * @alias\n */\nconst stop = stopChild;\n\nfunction checkStateIn(snapshot, _, {\n  stateValue\n}) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some(sn => sn === target);\n  }\n  return snapshot.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn() {\n    return false;\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it\n * evaluates to `false`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, not } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => false\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: not('someNamedGuard'),\n *       actions: () => {\n *         // will be executed if guard in `not(...)`\n *         // evaluates to `false`\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard\n */\nfunction not(guard) {\n  function not(_args, _params) {\n    return false;\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.every(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, and } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if all guards in `and(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction and(guards) {\n  function and(_args, _params) {\n    return false;\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.some(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to\n * it evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, or } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if any of the guards in `or(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction or(guards) {\n  function or(_args, _params) {\n    return false;\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, snapshot) {\n  const {\n    machine\n  } = snapshot;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, snapshot);\n  }\n  const guardArgs = {\n    context,\n    event\n  };\n  const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({\n    context,\n    event\n  }) : guard.params : undefined;\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params\n  );\n}\n\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getAllStateNodes(stateNodes) {\n  const nodeSet = new Set(stateNodes);\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach(sn => nodeSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n  return nodeSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(stateNodes) {\n  const adjList = new Map();\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, stateNodes) {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(stateNodeSet, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && stateNodeSet.has(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(stateNodeSet, sn));\n  }\n  return stateNode.type === 'final';\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(eventDescriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (eventDescriptor === WILDCARD) {\n      return true;\n    }\n    if (!eventDescriptor.endsWith('.*')) {\n      return false;\n    }\n    const partialEventTokens = eventDescriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/** All delayed transitions from the config. */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = delay => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = Object.keys(afterConfig).flatMap(delay => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-base-to-string\n    `Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`);\n  }\n  const transition = {\n    source: stateNode,\n    actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n  return transition;\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryDefaultTransition(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.config.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial;\n  }\n  return {\n    target: normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)\n  };\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodesWithTheirAncestors(stateNode) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return set;\n}\n/** Returns the child state node from its relative `stateKey`, or throws. */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nfunction getStateNodes(stateNode, stateValue) {\n  if (typeof stateValue === 'string') {\n    const childStateNode = stateNode.states[stateValue];\n    if (!childStateNode) {\n      throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);\n    }\n    return [stateNode, childStateNode];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, snapshot, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, snapshot, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, snapshot, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, snapshot, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], stateNodeSet, historyValue), computeExitSet([t2], stateNodeSet, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLeastCommonAncestor(stateNodes) {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every(sn => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return;\n  }\n  if (!transition.reenter && targetStates.every(target => target === transition.source || isDescendant(target, transition.source))) {\n    return transition.source;\n  }\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n  return transition.source.machine.root;\n}\nfunction computeExitSet(transitions, stateNodeSet, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\nfunction areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** https://www.w3.org/TR/scxml/#microstepProcedure */\nfunction microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n  const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue, actorScope.actionExecutor);\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap(t => t.actions), internalQueue, undefined);\n\n  // Enter states\n  nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);\n  const nextStateNodes = [...mutStateNodeSet];\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b) => b.order - a.order).flatMap(state => state.exit), internalQueue, undefined);\n  }\n\n  // eslint-disable-next-line no-useless-catch\n  try {\n    if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {\n  if (rootNode.output === undefined) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);\n  return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);\n}\nfunction enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n  const completedNodes = new Set();\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(spawnChild(invokeDef.src, {\n        ...invokeDef,\n        syncSnapshot: !!invokeDef.onSnapshot\n      }));\n    }\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial.actions;\n      actions.push(...initialActions);\n    }\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map(invokeDef => invokeDef.id));\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n      if (parent?.type === 'compound') {\n        internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));\n      }\n      while (ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)\n      });\n    }\n  }\n  return nextSnapshot;\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n    for (const s of t.target || []) {\n      if (!isHistoryNode(s) && (\n      // if the target is different than the source then it will *definitely* be entered\n      t.source !== s ||\n      // we know that the domain can't lie within the source\n      // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n      t.source !== domain ||\n      // reentering transitions always enter the target, even if it's the source itself\n      t.reenter)) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain);\n      }\n      addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));\n}\nfunction exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue, _actionExecutor) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n  let changedHistory;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= {\n        ...historyValue\n      };\n      changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [...s.exit, ...s.invoke.map(def => stopChild(def.id))], internalQueue, undefined);\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue];\n}\nfunction getAction(machine, actionType) {\n  return machine.implementations.actions[actionType];\n}\nfunction resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {\n  const {\n    machine\n  } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n\n    getAction(machine, typeof action === 'string' ? action : action.type);\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n    const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({\n      context: intermediateSnapshot.context,\n      event\n    }) : action.params : undefined;\n    if (!resolvedAction || !('resolve' in resolvedAction)) {\n      actorScope.actionExecutor({\n        type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',\n        info: actionArgs,\n        params: actionParams,\n        exec: resolvedAction\n      });\n      continue;\n    }\n    const builtinAction = resolvedAction;\n    const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction,\n    // this holds all params\n    extra);\n    intermediateSnapshot = nextState;\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n    if ('execute' in builtinAction) {\n      actorScope.actionExecutor({\n        type: builtinAction.type,\n        info: actionArgs,\n        params,\n        exec: builtinAction.execute.bind(null, actorScope, params)\n      });\n    }\n    if (actions) {\n      intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);\n    }\n  }\n  return intermediateSnapshot;\n}\nfunction resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {\n  const retries = deferredActorIds ? [] : undefined;\n  const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {\n    internalQueue,\n    deferredActorIds\n  }, retries);\n  retries?.forEach(([builtinAction, params]) => {\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\nfunction macrostep(snapshot, event, actorScope, internalQueue) {\n  let nextSnapshot = snapshot;\n  const microstates = [];\n  function addMicrostate(microstate, event, transitions) {\n    actorScope.system._sendInspectionEvent({\n      type: '@xstate.microstep',\n      actorRef: actorScope.self,\n      event,\n      snapshot: microstate,\n      _transitions: transitions\n    });\n    microstates.push(microstate);\n  }\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {\n      status: 'stopped'\n    });\n    addMicrostate(nextSnapshot, event, []);\n    return {\n      snapshot: nextSnapshot,\n      microstates\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldn't be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      addMicrostate(nextSnapshot, currentEvent, []);\n      return {\n        snapshot: nextSnapshot,\n        microstates\n      };\n    }\n    nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false,\n    // isInitial\n    internalQueue);\n    addMicrostate(nextSnapshot, currentEvent, transitions);\n  }\n  let shouldSelectEventlessTransitions = true;\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift();\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n    nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    addMicrostate(nextSnapshot, nextEvent, enabledTransitions);\n  }\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n  return {\n    snapshot: nextSnapshot,\n    microstates\n  };\n}\nfunction stopChildren(nextState, event, actorScope) {\n  return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map(child => stopChild(child)), [], undefined);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, undefined))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state\n * node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\n\nfunction isMachineSnapshot(value) {\n  return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;\n}\nconst machineSnapshotMatches = function matches(testValue) {\n  return matchesState(testValue, this.value);\n};\nconst machineSnapshotHasTag = function hasTag(tag) {\n  return this.tags.has(tag);\n};\nconst machineSnapshotCan = function can(event) {\n  const transitionData = this.machine.getTransitionData(this, event);\n  return !!transitionData?.length &&\n  // Check that at least one transition is not forbidden\n  transitionData.some(t => t.target !== undefined || t.actions.length);\n};\nconst machineSnapshotToJSON = function toJSON() {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return {\n    ...jsonValues,\n    tags: Array.from(tags)\n  };\n};\nconst machineSnapshotGetMeta = function getMeta() {\n  return this._nodes.reduce((acc, stateNode) => {\n    if (stateNode.meta !== undefined) {\n      acc[stateNode.id] = stateNode.meta;\n    }\n    return acc;\n  }, {});\n};\nfunction createMachineSnapshot(config, machine) {\n  return {\n    status: config.status,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes),\n    tags: new Set(config._nodes.flatMap(sn => sn.tags)),\n    children: config.children,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\nfunction cloneMachineSnapshot(snapshot, config = {}) {\n  return createMachineSnapshot({\n    ...snapshot,\n    ...config\n  }, snapshot.machine);\n}\nfunction serializeHistoryValue(historyValue) {\n  if (typeof historyValue !== 'object' || historyValue === null) {\n    return {};\n  }\n  const result = {};\n  for (const key in historyValue) {\n    const value = historyValue[key];\n    if (Array.isArray(value)) {\n      result[key] = value.map(item => ({\n        id: item.id\n      }));\n    }\n  }\n  return result;\n}\nfunction getPersistedSnapshot(snapshot, options) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n  const childrenJson = {};\n  for (const id in children) {\n    const child = children[id];\n    childrenJson[id] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context),\n    children: childrenJson,\n    historyValue: serializeHistoryValue(jsonValues.historyValue)\n  };\n  return persisted;\n}\nfunction persistContext(contextPart) {\n  let copy;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n          ...contextPart\n        };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: value.id\n        };\n      } else {\n        const result = persistContext(value);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n            ...contextPart\n          };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\n\nfunction resolveRaise(_, snapshot, args, actionParams, {\n  event: eventOrExpr,\n  id,\n  delay\n}, {\n  internalQueue\n}) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }, undefined];\n}\nfunction executeRaise(actorScope, params) {\n  const {\n    event,\n    delay,\n    id\n  } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nfunction raise(eventOrExpr, options) {\n  function raise(_args, _params) {\n  }\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n  return raise;\n}\n\nexports.$$ACTOR_TYPE = $$ACTOR_TYPE;\nexports.Actor = Actor;\nexports.NULL_EVENT = NULL_EVENT;\nexports.ProcessingStatus = ProcessingStatus;\nexports.STATE_DELIMITER = STATE_DELIMITER;\nexports.XSTATE_ERROR = XSTATE_ERROR;\nexports.XSTATE_STOP = XSTATE_STOP;\nexports.and = and;\nexports.cancel = cancel;\nexports.cloneMachineSnapshot = cloneMachineSnapshot;\nexports.createActor = createActor;\nexports.createErrorActorEvent = createErrorActorEvent;\nexports.createInitEvent = createInitEvent;\nexports.createInvokeId = createInvokeId;\nexports.createMachineSnapshot = createMachineSnapshot;\nexports.evaluateGuard = evaluateGuard;\nexports.formatInitialTransition = formatInitialTransition;\nexports.formatTransition = formatTransition;\nexports.formatTransitions = formatTransitions;\nexports.getAllOwnEventDescriptors = getAllOwnEventDescriptors;\nexports.getAllStateNodes = getAllStateNodes;\nexports.getCandidates = getCandidates;\nexports.getDelayedTransitions = getDelayedTransitions;\nexports.getInitialStateNodes = getInitialStateNodes;\nexports.getPersistedSnapshot = getPersistedSnapshot;\nexports.getStateNodeByPath = getStateNodeByPath;\nexports.getStateNodes = getStateNodes;\nexports.interpret = interpret;\nexports.isInFinalState = isInFinalState;\nexports.isMachineSnapshot = isMachineSnapshot;\nexports.isStateId = isStateId;\nexports.macrostep = macrostep;\nexports.mapValues = mapValues;\nexports.matchesState = matchesState;\nexports.microstep = microstep;\nexports.not = not;\nexports.or = or;\nexports.pathToStateValue = pathToStateValue;\nexports.raise = raise;\nexports.resolveActionsAndContext = resolveActionsAndContext;\nexports.resolveReferencedActor = resolveReferencedActor;\nexports.resolveStateValue = resolveStateValue;\nexports.spawnChild = spawnChild;\nexports.stateIn = stateIn;\nexports.stop = stop;\nexports.stopChild = stopChild;\nexports.toArray = toArray;\nexports.toObserver = toObserver;\nexports.toStatePath = toStatePath;\nexports.toTransitionConfigArray = toTransitionConfigArray;\nexports.transitionNode = transitionNode;\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar guards_dist_xstateGuards = require('../../dist/raise-5872b9e8.cjs.js');\nrequire('../../dev/dist/xstate-dev.cjs.js');\n\n/**\n * Represents an actor created by `fromTransition`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromTransition,\n *   createActor,\n *   type AnyActorSystem\n * } from 'xstate';\n *\n * //* The actor's stored context.\n * type Context = {\n *   // The current count.\n *   count: number;\n *   // The amount to increase `count` by.\n *   step: number;\n * };\n * // The events the actor receives.\n * type Event = { type: 'increment' };\n * // The actor's input.\n * type Input = { step?: number };\n *\n * // Actor logic that increments `count` by `step` when it receives an event of\n * // type `increment`.\n * const logic = fromTransition<Context, Event, AnyActorSystem, Input>(\n *   (state, event, actorScope) => {\n *     actorScope.self;\n *     //         ^? TransitionActorRef<Context, Event>\n *\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + state.step\n *       };\n *     }\n *     return state;\n *   },\n *   ({ input, self }) => {\n *     self;\n *     // ^? TransitionActorRef<Context, Event>\n *\n *     return {\n *       count: 0,\n *       step: input.step ?? 1\n *     };\n *   }\n * );\n *\n * const actor = createActor(logic, { input: { step: 10 } });\n * //    ^? TransitionActorRef<Context, Event>\n * ```\n *\n * @see {@link fromTransition}\n */\n\n/**\n * Returns actor logic given a transition function and its initial state.\n *\n * A \u201Ctransition function\u201D is a function that takes the current `state` and\n * received `event` object as arguments, and returns the next state, similar to\n * a reducer.\n *\n * Actors created from transition logic (\u201Ctransition actors\u201D) can:\n *\n * - Receive events\n * - Emit snapshots of its state\n *\n * The transition function\u2019s `state` is used as its transition actor\u2019s\n * `context`.\n *\n * Note that the \"state\" for a transition function is provided by the initial\n * state argument, and is not the same as the State object of an actor or a\n * state within a machine configuration.\n *\n * @example\n *\n * ```ts\n * const transitionLogic = fromTransition(\n *   (state, event) => {\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + 1\n *       };\n *     }\n *     return state;\n *   },\n *   { count: 0 }\n * );\n *\n * const transitionActor = createActor(transitionLogic);\n * transitionActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * transitionActor.start();\n * // => {\n * //   status: 'active',\n * //   context: { count: 0 },\n * //   ...\n * // }\n *\n * transitionActor.send({ type: 'increment' });\n * // => {\n * //   status: 'active',\n * //   context: { count: 1 },\n * //   ...\n * // }\n * ```\n *\n * @param transition The transition function used to describe the transition\n *   logic. It should return the next state given the current state and event.\n *   It receives the following arguments:\n *\n *   - `state` - the current state.\n *   - `event` - the received event.\n *   - `actorScope` - the actor scope object, with properties like `self` and\n *       `system`.\n *\n * @param initialContext The initial state of the transition function, either an\n *   object representing the state, or a function which returns a state object.\n *   If a function, it will receive as its only argument an object with the\n *   following properties:\n *\n *   - `input` - the `input` provided to its parent transition actor.\n *   - `self` - a reference to its parent transition actor.\n *\n * @returns Actor logic\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromTransition(transition, initialContext) {\n  return {\n    config: transition,\n    transition: (snapshot, event, actorScope) => {\n      return {\n        ...snapshot,\n        context: transition(snapshot.context, event, actorScope)\n      };\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: typeof initialContext === 'function' ? initialContext({\n          input\n        }) : initialContext\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n}\n\nconst instanceStates = /* #__PURE__ */new WeakMap();\n\n/**\n * Represents an actor created by `fromCallback`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromCallback, createActor } from 'xstate';\n *\n * // The events the actor receives.\n * type Event = { type: 'someEvent' };\n * // The actor's input.\n * type Input = { name: string };\n *\n * // Actor logic that logs whenever it receives an event of type `someEvent`.\n * const logic = fromCallback<Event, Input>(({ self, input, receive }) => {\n *   self;\n *   // ^? CallbackActorRef<Event, Input>\n *\n *   receive((event) => {\n *     if (event.type === 'someEvent') {\n *       console.log(`${input.name}: received \"someEvent\" event`);\n *       // logs 'myActor: received \"someEvent\" event'\n *     }\n *   });\n * });\n *\n * const actor = createActor(logic, { input: { name: 'myActor' } });\n * //    ^? CallbackActorRef<Event, Input>\n * ```\n *\n * @see {@link fromCallback}\n */\n\n/**\n * An actor logic creator which returns callback logic as defined by a callback\n * function.\n *\n * @remarks\n * Useful for subscription-based or other free-form logic that can send events\n * back to the parent actor.\n *\n * Actors created from callback logic (\u201Ccallback actors\u201D) can:\n *\n * - Receive events via the `receive` function\n * - Send events to the parent actor via the `sendBack` function\n *\n * Callback actors are a bit different from other actors in that they:\n *\n * - Do not work with `onDone`\n * - Do not produce a snapshot using `.getSnapshot()`\n * - Do not emit values when used with `.subscribe()`\n * - Can not be stopped with `.stop()`\n *\n * @example\n *\n * ```typescript\n * const callbackLogic = fromCallback(({ sendBack, receive }) => {\n *   let lockStatus = 'unlocked';\n *\n *   const handler = (event) => {\n *     if (lockStatus === 'locked') {\n *       return;\n *     }\n *     sendBack(event);\n *   };\n *\n *   receive((event) => {\n *     if (event.type === 'lock') {\n *       lockStatus = 'locked';\n *     } else if (event.type === 'unlock') {\n *       lockStatus = 'unlocked';\n *     }\n *   });\n *\n *   document.body.addEventListener('click', handler);\n *\n *   return () => {\n *     document.body.removeEventListener('click', handler);\n *   };\n * });\n * ```\n *\n * @param callback - The callback function used to describe the callback logic\n *   The callback function is passed an object with the following properties:\n *\n *   - `receive` - A function that can send events back to the parent actor; the\n *       listener is then called whenever events are received by the callback\n *       actor\n *   - `sendBack` - A function that can send events back to the parent actor\n *   - `input` - Data that was provided to the callback actor\n *   - `self` - The parent actor of the callback actor\n *   - `system` - The actor system to which the callback actor belongs The callback\n *       function can (optionally) return a cleanup function, which is called\n *       when the actor is stopped.\n *\n * @returns Callback logic\n * @see {@link CallbackLogicFunction} for more information about the callback function and its object argument\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromCallback(callback) {\n  const logic = {\n    config: callback,\n    start: (state, actorScope) => {\n      const {\n        self,\n        system,\n        emit\n      } = actorScope;\n      const callbackState = {\n        receivers: undefined,\n        dispose: undefined\n      };\n      instanceStates.set(self, callbackState);\n      callbackState.dispose = callback({\n        input: state.input,\n        system,\n        self,\n        sendBack: event => {\n          if (self.getSnapshot().status === 'stopped') {\n            return;\n          }\n          if (self._parent) {\n            system._relay(self, self._parent, event);\n          }\n        },\n        receive: listener => {\n          callbackState.receivers ??= new Set();\n          callbackState.receivers.add(listener);\n        },\n        emit\n      });\n    },\n    transition: (state, event, actorScope) => {\n      const callbackState = instanceStates.get(actorScope.self);\n      if (event.type === guards_dist_xstateGuards.XSTATE_STOP) {\n        state = {\n          ...state,\n          status: 'stopped',\n          error: undefined\n        };\n        callbackState.dispose?.();\n        return state;\n      }\n      callbackState.receivers?.forEach(receiver => receiver(event));\n      return state;\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst XSTATE_OBSERVABLE_NEXT = 'xstate.observable.next';\nconst XSTATE_OBSERVABLE_ERROR = 'xstate.observable.error';\nconst XSTATE_OBSERVABLE_COMPLETE = 'xstate.observable.complete';\n\n/**\n * Represents an actor created by `fromObservable` or `fromEventObservable`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * // The type of the value observed by the actor's logic.\n * type Context = number;\n * // The actor's input.\n * type Input = { period?: number };\n *\n * // Actor logic that observes a number incremented every `input.period`\n * // milliseconds (default: 1_000).\n * const logic = fromObservable<Context, Input>(({ input, self }) => {\n *   self;\n *   // ^? ObservableActorRef<Event, Input>\n *\n *   return interval(input.period ?? 1_000);\n * });\n *\n * const actor = createActor(logic, { input: { period: 2_000 } });\n * //    ^? ObservableActorRef<Event, Input>\n * ```\n *\n * @see {@link fromObservable}\n * @see {@link fromEventObservable}\n */\n\n/**\n * Observable actor logic is described by an observable stream of values. Actors\n * created from observable logic (\u201Cobservable actors\u201D) can:\n *\n * - Emit snapshots of the observable\u2019s emitted value\n *\n * The observable\u2019s emitted value is used as its observable actor\u2019s `context`.\n *\n * Sending events to observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * const logic = fromObservable((obj) => interval(1000));\n *\n * const actor = createActor(logic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot.context);\n * });\n *\n * actor.start();\n * // At every second:\n * // Logs 0\n * // Logs 1\n * // Logs 2\n * // ...\n * ```\n *\n * @param observableCreator A function that creates an observable. It receives\n *   one argument, an object with the following properties:\n *\n *   - `input` - Data that was provided to the observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the observable actor belongs\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.\n * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.\n */\nfunction fromObservable(observableCreator) {\n  // TODO: add event types\n  const logic = {\n    config: observableCreator,\n    transition: (snapshot, event) => {\n      if (snapshot.status !== 'active') {\n        return snapshot;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_NEXT:\n          {\n            const newSnapshot = {\n              ...snapshot,\n              context: event.data\n            };\n            return newSnapshot;\n          }\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...snapshot,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...snapshot,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case guards_dist_xstateGuards.XSTATE_STOP:\n          snapshot._subscription.unsubscribe();\n          return {\n            ...snapshot,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return snapshot;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = observableCreator({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_NEXT,\n            data: value\n          });\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...state\n    }) => state,\n    restoreSnapshot: state => ({\n      ...state,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\n/**\n * Creates event observable logic that listens to an observable that delivers\n * event objects.\n *\n * Event observable actor logic is described by an observable stream of\n * {@link https://stately.ai/docs/transitions#event-objects | event objects}.\n * Actors created from event observable logic (\u201Cevent observable actors\u201D) can:\n *\n * - Implicitly send events to its parent actor\n * - Emit snapshots of its emitted event objects\n *\n * Sending events to event observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromEventObservable,\n *   Subscribable,\n *   EventObject,\n *   createMachine,\n *   createActor\n * } from 'xstate';\n * import { fromEvent } from 'rxjs';\n *\n * const mouseClickLogic = fromEventObservable(\n *   () => fromEvent(document.body, 'click') as Subscribable<EventObject>\n * );\n *\n * const canvasMachine = createMachine({\n *   invoke: {\n *     // Will send mouse `click` events to the canvas actor\n *     src: mouseClickLogic\n *   }\n * });\n *\n * const canvasActor = createActor(canvasMachine);\n * canvasActor.start();\n * ```\n *\n * @param lazyObservable A function that creates an observable that delivers\n *   event objects. It receives one argument, an object with the following\n *   properties:\n *\n *   - `input` - Data that was provided to the event observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the event observable actor belongs.\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n */\nfunction fromEventObservable(lazyObservable) {\n  // TODO: event types\n  const logic = {\n    config: lazyObservable,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case guards_dist_xstateGuards.XSTATE_STOP:\n          state._subscription.unsubscribe();\n          return {\n            ...state,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = lazyObservable({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          if (self._parent) {\n            system._relay(self, self._parent, value);\n          }\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...snapshot\n    }) => snapshot,\n    restoreSnapshot: snapshot => ({\n      ...snapshot,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\nconst XSTATE_PROMISE_RESOLVE = 'xstate.promise.resolve';\nconst XSTATE_PROMISE_REJECT = 'xstate.promise.reject';\n\n/**\n * Represents an actor created by `fromPromise`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromPromise, createActor } from 'xstate';\n *\n * // The actor's resolved output\n * type Output = string;\n * // The actor's input.\n * type Input = { message: string };\n *\n * // Actor logic that fetches the url of an image of a cat saying `input.message`.\n * const logic = fromPromise<Output, Input>(async ({ input, self }) => {\n *   self;\n *   // ^? PromiseActorRef<Output, Input>\n *\n *   const data = await fetch(\n *     `https://cataas.com/cat/says/${input.message}`\n *   );\n *   const url = await data.json();\n *   return url;\n * });\n *\n * const actor = createActor(logic, { input: { message: 'hello world' } });\n * //    ^? PromiseActorRef<Output, Input>\n * ```\n *\n * @see {@link fromPromise}\n */\n\nconst controllerMap = new WeakMap();\n\n/**\n * An actor logic creator which returns promise logic as defined by an async\n * process that resolves or rejects after some time.\n *\n * Actors created from promise actor logic (\u201Cpromise actors\u201D) can:\n *\n * - Emit the resolved value of the promise\n * - Output the resolved value of the promise\n *\n * Sending events to promise actors will have no effect.\n *\n * @example\n *\n * ```ts\n * const promiseLogic = fromPromise(async () => {\n *   const result = await fetch('https://example.com/...').then((data) =>\n *     data.json()\n *   );\n *\n *   return result;\n * });\n *\n * const promiseActor = createActor(promiseLogic);\n * promiseActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * promiseActor.start();\n * // => {\n * //   output: undefined,\n * //   status: 'active'\n * //   ...\n * // }\n *\n * // After promise resolves\n * // => {\n * //   output: { ... },\n * //   status: 'done',\n * //   ...\n * // }\n * ```\n *\n * @param promiseCreator A function which returns a Promise, and accepts an\n *   object with the following properties:\n *\n *   - `input` - Data that was provided to the promise actor\n *   - `self` - The parent actor of the promise actor\n *   - `system` - The actor system to which the promise actor belongs\n *\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromPromise(promiseCreator) {\n  const logic = {\n    config: promiseCreator,\n    transition: (state, event, scope) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_PROMISE_RESOLVE:\n          {\n            const resolvedValue = event.data;\n            return {\n              ...state,\n              status: 'done',\n              output: resolvedValue,\n              input: undefined\n            };\n          }\n        case XSTATE_PROMISE_REJECT:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined\n          };\n        case guards_dist_xstateGuards.XSTATE_STOP:\n          {\n            controllerMap.get(scope.self)?.abort();\n            return {\n              ...state,\n              status: 'stopped',\n              input: undefined\n            };\n          }\n        default:\n          return state;\n      }\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      // TODO: determine how to allow customizing this so that promises\n      // can be restarted if necessary\n      if (state.status !== 'active') {\n        return;\n      }\n      const controller = new AbortController();\n      controllerMap.set(self, controller);\n      const resolvedPromise = Promise.resolve(promiseCreator({\n        input: state.input,\n        system,\n        self,\n        signal: controller.signal,\n        emit\n      }));\n      resolvedPromise.then(response => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_RESOLVE,\n          data: response\n        });\n      }, errorData => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_REJECT,\n          data: errorData\n        });\n      });\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst emptyLogic = fromTransition(_ => undefined, undefined);\nfunction createEmptyActor() {\n  return guards_dist_xstateGuards.createActor(emptyLogic);\n}\n\nexports.createEmptyActor = createEmptyActor;\nexports.fromCallback = fromCallback;\nexports.fromEventObservable = fromEventObservable;\nexports.fromObservable = fromObservable;\nexports.fromPromise = fromPromise;\nexports.fromTransition = fromTransition;\n", "'use strict';\n\nvar guards_dist_xstateGuards = require('./raise-5872b9e8.cjs.js');\n\nfunction createSpawner(actorScope, {\n  machine,\n  context\n}, event, spawnedChildren) {\n  const spawn = (src, options) => {\n    if (typeof src === 'string') {\n      const logic = guards_dist_xstateGuards.resolveReferencedActor(machine, src);\n      if (!logic) {\n        throw new Error(`Actor logic '${src}' not implemented in machine '${machine.id}'`);\n      }\n      const actorRef = guards_dist_xstateGuards.createActor(logic, {\n        id: options?.id,\n        parent: actorScope.self,\n        syncSnapshot: options?.syncSnapshot,\n        input: typeof options?.input === 'function' ? options.input({\n          context,\n          event,\n          self: actorScope.self\n        }) : options?.input,\n        src,\n        systemId: options?.systemId\n      });\n      spawnedChildren[actorRef.id] = actorRef;\n      return actorRef;\n    } else {\n      const actorRef = guards_dist_xstateGuards.createActor(src, {\n        id: options?.id,\n        parent: actorScope.self,\n        syncSnapshot: options?.syncSnapshot,\n        input: options?.input,\n        src,\n        systemId: options?.systemId\n      });\n      return actorRef;\n    }\n  };\n  return (src, options) => {\n    const actorRef = spawn(src, options); // TODO: fix types\n    spawnedChildren[actorRef.id] = actorRef;\n    actorScope.defer(() => {\n      if (actorRef._processingStatus === guards_dist_xstateGuards.ProcessingStatus.Stopped) {\n        return;\n      }\n      actorRef.start();\n    });\n    return actorRef;\n  };\n}\n\nfunction resolveAssign(actorScope, snapshot, actionArgs, actionParams, {\n  assignment\n}) {\n  if (!snapshot.context) {\n    throw new Error('Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.');\n  }\n  const spawnedChildren = {};\n  const assignArgs = {\n    context: snapshot.context,\n    event: actionArgs.event,\n    spawn: createSpawner(actorScope, snapshot, actionArgs.event, spawnedChildren),\n    self: actorScope.self,\n    system: actorScope.system\n  };\n  let partialUpdate = {};\n  if (typeof assignment === 'function') {\n    partialUpdate = assignment(assignArgs, actionParams);\n  } else {\n    for (const key of Object.keys(assignment)) {\n      const propAssignment = assignment[key];\n      partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(assignArgs, actionParams) : propAssignment;\n    }\n  }\n  const updatedContext = Object.assign({}, snapshot.context, partialUpdate);\n  return [guards_dist_xstateGuards.cloneMachineSnapshot(snapshot, {\n    context: updatedContext,\n    children: Object.keys(spawnedChildren).length ? {\n      ...snapshot.children,\n      ...spawnedChildren\n    } : snapshot.children\n  }), undefined, undefined];\n}\n/**\n * Updates the current context of the machine.\n *\n * @example\n *\n * ```ts\n * import { createMachine, assign } from 'xstate';\n *\n * const countMachine = createMachine({\n *   context: {\n *     count: 0,\n *     message: ''\n *   },\n *   on: {\n *     inc: {\n *       actions: assign({\n *         count: ({ context }) => context.count + 1\n *       })\n *     },\n *     updateMessage: {\n *       actions: assign(({ context, event }) => {\n *         return {\n *           message: event.message.trim()\n *         };\n *       })\n *     }\n *   }\n * });\n * ```\n *\n * @param assignment An object that represents the partial context to update, or\n *   a function that returns an object that represents the partial context to\n *   update.\n */\nfunction assign(assignment) {\n  function assign(_args, _params) {\n  }\n  assign.type = 'xstate.assign';\n  assign.assignment = assignment;\n  assign.resolve = resolveAssign;\n  return assign;\n}\n\nfunction resolveEmit(_, snapshot, args, actionParams, {\n  event: eventOrExpr\n}) {\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  return [snapshot, {\n    event: resolvedEvent\n  }, undefined];\n}\nfunction executeEmit(actorScope, {\n  event\n}) {\n  actorScope.defer(() => actorScope.emit(event));\n}\n/**\n * Emits an event to event handlers registered on the actor via `actor.on(event,\n * handler)`.\n *\n * @example\n *\n * ```ts\n * import { emit } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     something: {\n *       actions: emit({\n *         type: 'emitted',\n *         some: 'data'\n *       })\n *     }\n *   }\n *   // ...\n * });\n *\n * const actor = createActor(machine).start();\n *\n * actor.on('emitted', (event) => {\n *   console.log(event);\n * });\n *\n * actor.send({ type: 'something' });\n * // logs:\n * // {\n * //   type: 'emitted',\n * //   some: 'data'\n * // }\n * ```\n */\nfunction emit(/** The event to emit, or an expression that returns an event to emit. */\neventOrExpr) {\n  function emit(_args, _params) {\n  }\n  emit.type = 'xstate.emit';\n  emit.event = eventOrExpr;\n  emit.resolve = resolveEmit;\n  emit.execute = executeEmit;\n  return emit;\n}\n\n// this is needed to make JSDoc `@link` work properly\n\n/**\n * @remarks\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes\n * to contextual typing. It especially is a problem when the union has a\n * function member, like here:\n *\n * ```ts\n * declare function test(\n *   cbOrVal: ((arg: number) => unknown) | unknown\n * ): void;\n * test((arg) => {}); // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same\n * value space as `unknown`.\n */\n\n// https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887\n\n// @TODO: we can't use native `NoInfer` as we need those:\n// https://github.com/microsoft/TypeScript/pull/61092\n// https://github.com/microsoft/TypeScript/pull/61077\n// but even with those fixes native NoInfer still doesn't work - further issues have to be reproduced and fixed\n\n/** @deprecated Use the built-in `NoInfer` type instead */\n\n/** The full definition of an event, with a string `type`. */\n\n/**\n * The string or object representing the state value relative to the parent\n * state node.\n *\n * @remarks\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n * - For complex state nodes, this is an object, e.g., `{ success:\n *   \"someChildState\" }`.\n */\n\n/** @deprecated Use `AnyMachineSnapshot` instead */\n\n// TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something\n/** @ignore */\n\nlet SpecialTargets = /*#__PURE__*/function (SpecialTargets) {\n  SpecialTargets[\"Parent\"] = \"#_parent\";\n  SpecialTargets[\"Internal\"] = \"#_internal\";\n  return SpecialTargets;\n}({});\n\n/** @deprecated Use `AnyActor` instead. */\n\n// Based on RxJS types\n\n// TODO: in v6, this should only accept AnyActorLogic, like ActorRefFromLogic\n\n/** @deprecated Use `Actor<T>` instead. */\n\n/**\n * Represents logic which can be used by an actor.\n *\n * @template TSnapshot - The type of the snapshot.\n * @template TEvent - The type of the event object.\n * @template TInput - The type of the input.\n * @template TSystem - The type of the actor system.\n */\n\n/** @deprecated */\n\n// TODO: cover all that can be actually returned\n\nfunction resolveSendTo(actorScope, snapshot, args, actionParams, {\n  to,\n  event: eventOrExpr,\n  id,\n  delay\n}, extra) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    `Only event objects may be used with sendTo; use sendTo({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  const resolvedTarget = typeof to === 'function' ? to(args, actionParams) : to;\n  let targetActorRef;\n  if (typeof resolvedTarget === 'string') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    if (resolvedTarget === SpecialTargets.Parent) {\n      targetActorRef = actorScope.self._parent;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n    else if (resolvedTarget === SpecialTargets.Internal) {\n      targetActorRef = actorScope.self;\n    } else if (resolvedTarget.startsWith('#_')) {\n      // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor\n      // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.\n      targetActorRef = snapshot.children[resolvedTarget.slice(2)];\n    } else {\n      targetActorRef = extra.deferredActorIds?.includes(resolvedTarget) ? resolvedTarget : snapshot.children[resolvedTarget];\n    }\n    if (!targetActorRef) {\n      throw new Error(`Unable to send event to actor '${resolvedTarget}' from machine '${snapshot.machine.id}'.`);\n    }\n  } else {\n    targetActorRef = resolvedTarget || actorScope.self;\n  }\n  return [snapshot, {\n    to: targetActorRef,\n    targetId: typeof resolvedTarget === 'string' ? resolvedTarget : undefined,\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }, undefined];\n}\nfunction retryResolveSendTo(_, snapshot, params) {\n  if (typeof params.to === 'string') {\n    params.to = snapshot.children[params.to];\n  }\n}\nfunction executeSendTo(actorScope, params) {\n  // this forms an outgoing events queue\n  // thanks to that the recipient actors are able to read the *updated* snapshot value of the sender\n  actorScope.defer(() => {\n    const {\n      to,\n      event,\n      delay,\n      id\n    } = params;\n    if (typeof delay === 'number') {\n      actorScope.system.scheduler.schedule(actorScope.self, to, event, delay, id);\n      return;\n    }\n    actorScope.system._relay(actorScope.self,\n    // at this point, in a deferred task, it should already be mutated by retryResolveSendTo\n    // if it initially started as a string\n    to, event.type === guards_dist_xstateGuards.XSTATE_ERROR ? guards_dist_xstateGuards.createErrorActorEvent(actorScope.self.id, event.data) : event);\n  });\n}\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event\n *   to send\n * @param options Send action options\n *\n *   - `id` - The unique send event identifier (used with `cancel()`).\n *   - `delay` - The number of milliseconds to delay the sending of the event.\n */\nfunction sendTo(to, eventOrExpr, options) {\n  function sendTo(_args, _params) {\n  }\n  sendTo.type = 'xstate.sendTo';\n  sendTo.to = to;\n  sendTo.event = eventOrExpr;\n  sendTo.id = options?.id;\n  sendTo.delay = options?.delay;\n  sendTo.resolve = resolveSendTo;\n  sendTo.retryResolve = retryResolveSendTo;\n  sendTo.execute = executeSendTo;\n  return sendTo;\n}\n\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nfunction sendParent(event, options) {\n  return sendTo(SpecialTargets.Parent, event, options);\n}\n/**\n * Forwards (sends) an event to the `target` actor.\n *\n * @param target The target actor to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nfunction forwardTo(target, options) {\n  return sendTo(target, ({\n    event\n  }) => event, options);\n}\n\nfunction resolveEnqueueActions(actorScope, snapshot, args, actionParams, {\n  collect\n}) {\n  const actions = [];\n  const enqueue = function enqueue(action) {\n    actions.push(action);\n  };\n  enqueue.assign = (...args) => {\n    actions.push(assign(...args));\n  };\n  enqueue.cancel = (...args) => {\n    actions.push(guards_dist_xstateGuards.cancel(...args));\n  };\n  enqueue.raise = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay`\n    actions.push(guards_dist_xstateGuards.raise(...args));\n  };\n  enqueue.sendTo = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay\n    actions.push(sendTo(...args));\n  };\n  enqueue.sendParent = (...args) => {\n    actions.push(sendParent(...args));\n  };\n  enqueue.spawnChild = (...args) => {\n    actions.push(guards_dist_xstateGuards.spawnChild(...args));\n  };\n  enqueue.stopChild = (...args) => {\n    actions.push(guards_dist_xstateGuards.stopChild(...args));\n  };\n  enqueue.emit = (...args) => {\n    actions.push(emit(...args));\n  };\n  collect({\n    context: args.context,\n    event: args.event,\n    enqueue,\n    check: guard => guards_dist_xstateGuards.evaluateGuard(guard, snapshot.context, args.event, snapshot),\n    self: actorScope.self,\n    system: actorScope.system\n  }, actionParams);\n  return [snapshot, undefined, actions];\n}\n/**\n * Creates an action object that will execute actions that are queued by the\n * `enqueue(action)` function.\n *\n * @example\n *\n * ```ts\n * import { createMachine, enqueueActions } from 'xstate';\n *\n * const machine = createMachine({\n *   entry: enqueueActions(({ enqueue, check }) => {\n *     enqueue.assign({ count: 0 });\n *\n *     if (check('someGuard')) {\n *       enqueue.assign({ count: 1 });\n *     }\n *\n *     enqueue('someAction');\n *   })\n * });\n * ```\n */\nfunction enqueueActions(collect) {\n  function enqueueActions(_args, _params) {\n  }\n  enqueueActions.type = 'xstate.enqueueActions';\n  enqueueActions.collect = collect;\n  enqueueActions.resolve = resolveEnqueueActions;\n  return enqueueActions;\n}\n\nfunction resolveLog(_, snapshot, actionArgs, actionParams, {\n  value,\n  label\n}) {\n  return [snapshot, {\n    value: typeof value === 'function' ? value(actionArgs, actionParams) : value,\n    label\n  }, undefined];\n}\nfunction executeLog({\n  logger\n}, {\n  value,\n  label\n}) {\n  if (label) {\n    logger(label, value);\n  } else {\n    logger(value);\n  }\n}\n/**\n * @param expr The expression function to evaluate which will be logged. Takes\n *   in 2 arguments:\n *\n *   - `ctx` - the current state context\n *   - `event` - the event that caused this action to be executed.\n *\n * @param label The label to give to the logged expression.\n */\nfunction log(value = ({\n  context,\n  event\n}) => ({\n  context,\n  event\n}), label) {\n  function log(_args, _params) {\n  }\n  log.type = 'xstate.log';\n  log.value = value;\n  log.label = label;\n  log.resolve = resolveLog;\n  log.execute = executeLog;\n  return log;\n}\n\nexports.SpecialTargets = SpecialTargets;\nexports.assign = assign;\nexports.emit = emit;\nexports.enqueueActions = enqueueActions;\nexports.forwardTo = forwardTo;\nexports.log = log;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar actors_dist_xstateActors = require('../actors/dist/xstate-actors.cjs.js');\nvar guards_dist_xstateGuards = require('./raise-5872b9e8.cjs.js');\nvar log = require('./log-fa2e731a.cjs.js');\nrequire('../dev/dist/xstate-dev.cjs.js');\n\n/**\n * Asserts that the given event object is of the specified type or types. Throws\n * an error if the event object is not of the specified types.\n *\n * @example\n *\n * ```ts\n * // ...\n * entry: ({ event }) => {\n *   assertEvent(event, 'doNothing');\n *   // event is { type: 'doNothing' }\n * },\n * // ...\n * exit: ({ event }) => {\n *   assertEvent(event, 'greet');\n *   // event is { type: 'greet'; message: string }\n *\n *   assertEvent(event, ['greet', 'notify']);\n *   // event is { type: 'greet'; message: string }\n *   // or { type: 'notify'; message: string; level: 'info' | 'error' }\n * },\n * ```\n */\nfunction assertEvent(event, type) {\n  const types = guards_dist_xstateGuards.toArray(type);\n  if (!types.includes(event.type)) {\n    const typesText = types.length === 1 ? `type \"${types[0]}\"` : `one of types \"${types.join('\", \"')}\"`;\n    throw new Error(`Expected event ${JSON.stringify(event)} to have ${typesText}`);\n  }\n}\n\nconst cache = new WeakMap();\nfunction memo(object, key, fn) {\n  let memoizedData = cache.get(object);\n  if (!memoizedData) {\n    memoizedData = {\n      [key]: fn()\n    };\n    cache.set(object, memoizedData);\n  } else if (!(key in memoizedData)) {\n    memoizedData[key] = fn();\n  }\n  return memoizedData[key];\n}\n\nconst EMPTY_OBJECT = {};\nconst toSerializableAction = action => {\n  if (typeof action === 'string') {\n    return {\n      type: action\n    };\n  }\n  if (typeof action === 'function') {\n    if ('resolve' in action) {\n      return {\n        type: action.type\n      };\n    }\n    return {\n      type: action.name\n    };\n  }\n  return action;\n};\nclass StateNode {\n  constructor(/** The raw config used to create the machine. */\n  config, options) {\n    this.config = config;\n    /**\n     * The relative key of the state node, which represents its location in the\n     * overall state value.\n     */\n    this.key = void 0;\n    /** The unique ID of the state node. */\n    this.id = void 0;\n    /**\n     * The type of this state node:\n     *\n     * - `'atomic'` - no child state nodes\n     * - `'compound'` - nested child state nodes (XOR)\n     * - `'parallel'` - orthogonal nested child state nodes (AND)\n     * - `'history'` - history state node\n     * - `'final'` - final state node\n     */\n    this.type = void 0;\n    /** The string path from the root machine node to this node. */\n    this.path = void 0;\n    /** The child state nodes. */\n    this.states = void 0;\n    /**\n     * The type of history on this state node. Can be:\n     *\n     * - `'shallow'` - recalls only top-level historical state value\n     * - `'deep'` - recalls historical state value at all levels\n     */\n    this.history = void 0;\n    /** The action(s) to be executed upon entering the state node. */\n    this.entry = void 0;\n    /** The action(s) to be executed upon exiting the state node. */\n    this.exit = void 0;\n    /** The parent state node. */\n    this.parent = void 0;\n    /** The root machine node. */\n    this.machine = void 0;\n    /**\n     * The meta data associated with this state node, which will be returned in\n     * State instances.\n     */\n    this.meta = void 0;\n    /**\n     * The output data sent with the \"xstate.done.state._id_\" event if this is a\n     * final state node.\n     */\n    this.output = void 0;\n    /**\n     * The order this state node appears. Corresponds to the implicit document\n     * order.\n     */\n    this.order = -1;\n    this.description = void 0;\n    this.tags = [];\n    this.transitions = void 0;\n    this.always = void 0;\n    this.parent = options._parent;\n    this.key = options._key;\n    this.machine = options._machine;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.id = this.config.id || [this.machine.id, ...this.path].join(guards_dist_xstateGuards.STATE_DELIMITER);\n    this.type = this.config.type || (this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.description = this.config.description;\n    this.order = this.machine.idMap.size;\n    this.machine.idMap.set(this.id, this);\n    this.states = this.config.states ? guards_dist_xstateGuards.mapValues(this.config.states, (stateConfig, key) => {\n      const stateNode = new StateNode(stateConfig, {\n        _parent: this,\n        _key: key,\n        _machine: this.machine\n      });\n      return stateNode;\n    }) : EMPTY_OBJECT;\n    if (this.type === 'compound' && !this.config.initial) {\n      throw new Error(`No initial state specified for compound state node \"#${this.id}\". Try adding { initial: \"${Object.keys(this.states)[0]}\" } to the state config.`);\n    }\n\n    // History config\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this.entry = guards_dist_xstateGuards.toArray(this.config.entry).slice();\n    this.exit = guards_dist_xstateGuards.toArray(this.config.exit).slice();\n    this.meta = this.config.meta;\n    this.output = this.type === 'final' || !this.parent ? this.config.output : undefined;\n    this.tags = guards_dist_xstateGuards.toArray(config.tags).slice();\n  }\n\n  /** @internal */\n  _initialize() {\n    this.transitions = guards_dist_xstateGuards.formatTransitions(this);\n    if (this.config.always) {\n      this.always = guards_dist_xstateGuards.toTransitionConfigArray(this.config.always).map(t => guards_dist_xstateGuards.formatTransition(this, guards_dist_xstateGuards.NULL_EVENT, t));\n    }\n    Object.keys(this.states).forEach(key => {\n      this.states[key]._initialize();\n    });\n  }\n\n  /** The well-structured state node definition. */\n  get definition() {\n    return {\n      id: this.id,\n      key: this.key,\n      version: this.machine.version,\n      type: this.type,\n      initial: this.initial ? {\n        target: this.initial.target,\n        source: this,\n        actions: this.initial.actions.map(toSerializableAction),\n        eventType: null,\n        reenter: false,\n        toJSON: () => ({\n          target: this.initial.target.map(t => `#${t.id}`),\n          source: `#${this.id}`,\n          actions: this.initial.actions.map(toSerializableAction),\n          eventType: null\n        })\n      } : undefined,\n      history: this.history,\n      states: guards_dist_xstateGuards.mapValues(this.states, state => {\n        return state.definition;\n      }),\n      on: this.on,\n      transitions: [...this.transitions.values()].flat().map(t => ({\n        ...t,\n        actions: t.actions.map(toSerializableAction)\n      })),\n      entry: this.entry.map(toSerializableAction),\n      exit: this.exit.map(toSerializableAction),\n      meta: this.meta,\n      order: this.order || -1,\n      output: this.output,\n      invoke: this.invoke,\n      description: this.description,\n      tags: this.tags\n    };\n  }\n\n  /** @internal */\n  toJSON() {\n    return this.definition;\n  }\n\n  /** The logic invoked as actors by this state node. */\n  get invoke() {\n    return memo(this, 'invoke', () => guards_dist_xstateGuards.toArray(this.config.invoke).map((invokeConfig, i) => {\n      const {\n        src,\n        systemId\n      } = invokeConfig;\n      const resolvedId = invokeConfig.id ?? guards_dist_xstateGuards.createInvokeId(this.id, i);\n      const sourceName = typeof src === 'string' ? src : `xstate.invoke.${guards_dist_xstateGuards.createInvokeId(this.id, i)}`;\n      return {\n        ...invokeConfig,\n        src: sourceName,\n        id: resolvedId,\n        systemId: systemId,\n        toJSON() {\n          const {\n            onDone,\n            onError,\n            ...invokeDefValues\n          } = invokeConfig;\n          return {\n            ...invokeDefValues,\n            type: 'xstate.invoke',\n            src: sourceName,\n            id: resolvedId\n          };\n        }\n      };\n    }));\n  }\n\n  /** The mapping of events to transitions. */\n  get on() {\n    return memo(this, 'on', () => {\n      const transitions = this.transitions;\n      return [...transitions].flatMap(([descriptor, t]) => t.map(t => [descriptor, t])).reduce((map, [descriptor, transition]) => {\n        map[descriptor] = map[descriptor] || [];\n        map[descriptor].push(transition);\n        return map;\n      }, {});\n    });\n  }\n  get after() {\n    return memo(this, 'delayedTransitions', () => guards_dist_xstateGuards.getDelayedTransitions(this));\n  }\n  get initial() {\n    return memo(this, 'initial', () => guards_dist_xstateGuards.formatInitialTransition(this, this.config.initial));\n  }\n\n  /** @internal */\n  next(snapshot, event) {\n    const eventType = event.type;\n    const actions = [];\n    let selectedTransition;\n    const candidates = memo(this, `candidates-${eventType}`, () => guards_dist_xstateGuards.getCandidates(this, eventType));\n    for (const candidate of candidates) {\n      const {\n        guard\n      } = candidate;\n      const resolvedContext = snapshot.context;\n      let guardPassed = false;\n      try {\n        guardPassed = !guard || guards_dist_xstateGuards.evaluateGuard(guard, resolvedContext, event, snapshot);\n      } catch (err) {\n        const guardType = typeof guard === 'string' ? guard : typeof guard === 'object' ? guard.type : undefined;\n        throw new Error(`Unable to evaluate guard ${guardType ? `'${guardType}' ` : ''}in transition for event '${eventType}' in state node '${this.id}':\\n${err.message}`);\n      }\n      if (guardPassed) {\n        actions.push(...candidate.actions);\n        selectedTransition = candidate;\n        break;\n      }\n    }\n    return selectedTransition ? [selectedTransition] : undefined;\n  }\n\n  /** All the event types accepted by this state node and its descendants. */\n  get events() {\n    return memo(this, 'events', () => {\n      const {\n        states\n      } = this;\n      const events = new Set(this.ownEvents);\n      if (states) {\n        for (const stateId of Object.keys(states)) {\n          const state = states[stateId];\n          if (state.states) {\n            for (const event of state.events) {\n              events.add(`${event}`);\n            }\n          }\n        }\n      }\n      return Array.from(events);\n    });\n  }\n\n  /**\n   * All the events that have transitions directly from this state node.\n   *\n   * Excludes any inert events.\n   */\n  get ownEvents() {\n    const events = new Set([...this.transitions.keys()].filter(descriptor => {\n      return this.transitions.get(descriptor).some(transition => !(!transition.target && !transition.actions.length && !transition.reenter));\n    }));\n    return Array.from(events);\n  }\n}\n\nconst STATE_IDENTIFIER = '#';\nclass StateMachine {\n  constructor(/** The raw config used to create the machine. */\n  config, implementations) {\n    this.config = config;\n    /** The machine's own version. */\n    this.version = void 0;\n    this.schemas = void 0;\n    this.implementations = void 0;\n    /** @internal */\n    this.__xstatenode = true;\n    /** @internal */\n    this.idMap = new Map();\n    this.root = void 0;\n    this.id = void 0;\n    this.states = void 0;\n    this.events = void 0;\n    this.id = config.id || '(machine)';\n    this.implementations = {\n      actors: implementations?.actors ?? {},\n      actions: implementations?.actions ?? {},\n      delays: implementations?.delays ?? {},\n      guards: implementations?.guards ?? {}\n    };\n    this.version = this.config.version;\n    this.schemas = this.config.schemas;\n    this.transition = this.transition.bind(this);\n    this.getInitialSnapshot = this.getInitialSnapshot.bind(this);\n    this.getPersistedSnapshot = this.getPersistedSnapshot.bind(this);\n    this.restoreSnapshot = this.restoreSnapshot.bind(this);\n    this.start = this.start.bind(this);\n    this.root = new StateNode(config, {\n      _key: this.id,\n      _machine: this\n    });\n    this.root._initialize();\n    this.states = this.root.states; // TODO: remove!\n    this.events = this.root.events;\n  }\n\n  /**\n   * Clones this state machine with the provided implementations.\n   *\n   * @param implementations Options (`actions`, `guards`, `actors`, `delays`)\n   *   to recursively merge with the existing options.\n   * @returns A new `StateMachine` instance with the provided implementations.\n   */\n  provide(implementations) {\n    const {\n      actions,\n      guards,\n      actors,\n      delays\n    } = this.implementations;\n    return new StateMachine(this.config, {\n      actions: {\n        ...actions,\n        ...implementations.actions\n      },\n      guards: {\n        ...guards,\n        ...implementations.guards\n      },\n      actors: {\n        ...actors,\n        ...implementations.actors\n      },\n      delays: {\n        ...delays,\n        ...implementations.delays\n      }\n    });\n  }\n  resolveState(config) {\n    const resolvedStateValue = guards_dist_xstateGuards.resolveStateValue(this.root, config.value);\n    const nodeSet = guards_dist_xstateGuards.getAllStateNodes(guards_dist_xstateGuards.getStateNodes(this.root, resolvedStateValue));\n    return guards_dist_xstateGuards.createMachineSnapshot({\n      _nodes: [...nodeSet],\n      context: config.context || {},\n      children: {},\n      status: guards_dist_xstateGuards.isInFinalState(nodeSet, this.root) ? 'done' : config.status || 'active',\n      output: config.output,\n      error: config.error,\n      historyValue: config.historyValue\n    }, this);\n  }\n\n  /**\n   * Determines the next snapshot given the current `snapshot` and received\n   * `event`. Calculates a full macrostep from all microsteps.\n   *\n   * @param snapshot The current snapshot\n   * @param event The received event\n   */\n  transition(snapshot, event, actorScope) {\n    return guards_dist_xstateGuards.macrostep(snapshot, event, actorScope, []).snapshot;\n  }\n\n  /**\n   * Determines the next state given the current `state` and `event`. Calculates\n   * a microstep.\n   *\n   * @param state The current state\n   * @param event The received event\n   */\n  microstep(snapshot, event, actorScope) {\n    return guards_dist_xstateGuards.macrostep(snapshot, event, actorScope, []).microstates;\n  }\n  getTransitionData(snapshot, event) {\n    return guards_dist_xstateGuards.transitionNode(this.root, snapshot.value, snapshot, event) || [];\n  }\n\n  /**\n   * The initial state _before_ evaluating any microsteps. This \"pre-initial\"\n   * state is provided to initial actions executed in the initial state.\n   */\n  getPreInitialState(actorScope, initEvent, internalQueue) {\n    const {\n      context\n    } = this.config;\n    const preInitial = guards_dist_xstateGuards.createMachineSnapshot({\n      context: typeof context !== 'function' && context ? context : {},\n      _nodes: [this.root],\n      children: {},\n      status: 'active'\n    }, this);\n    if (typeof context === 'function') {\n      const assignment = ({\n        spawn,\n        event,\n        self\n      }) => context({\n        spawn,\n        input: event.input,\n        self\n      });\n      return guards_dist_xstateGuards.resolveActionsAndContext(preInitial, initEvent, actorScope, [log.assign(assignment)], internalQueue, undefined);\n    }\n    return preInitial;\n  }\n\n  /**\n   * Returns the initial `State` instance, with reference to `self` as an\n   * `ActorRef`.\n   */\n  getInitialSnapshot(actorScope, input) {\n    const initEvent = guards_dist_xstateGuards.createInitEvent(input); // TODO: fix;\n    const internalQueue = [];\n    const preInitialState = this.getPreInitialState(actorScope, initEvent, internalQueue);\n    const nextState = guards_dist_xstateGuards.microstep([{\n      target: [...guards_dist_xstateGuards.getInitialStateNodes(this.root)],\n      source: this.root,\n      reenter: true,\n      actions: [],\n      eventType: null,\n      toJSON: null // TODO: fix\n    }], preInitialState, actorScope, initEvent, true, internalQueue);\n    const {\n      snapshot: macroState\n    } = guards_dist_xstateGuards.macrostep(nextState, initEvent, actorScope, internalQueue);\n    return macroState;\n  }\n  start(snapshot) {\n    Object.values(snapshot.children).forEach(child => {\n      if (child.getSnapshot().status === 'active') {\n        child.start();\n      }\n    });\n  }\n  getStateNodeById(stateId) {\n    const fullPath = guards_dist_xstateGuards.toStatePath(stateId);\n    const relativePath = fullPath.slice(1);\n    const resolvedStateId = guards_dist_xstateGuards.isStateId(fullPath[0]) ? fullPath[0].slice(STATE_IDENTIFIER.length) : fullPath[0];\n    const stateNode = this.idMap.get(resolvedStateId);\n    if (!stateNode) {\n      throw new Error(`Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`);\n    }\n    return guards_dist_xstateGuards.getStateNodeByPath(stateNode, relativePath);\n  }\n  get definition() {\n    return this.root.definition;\n  }\n  toJSON() {\n    return this.definition;\n  }\n  getPersistedSnapshot(snapshot, options) {\n    return guards_dist_xstateGuards.getPersistedSnapshot(snapshot, options);\n  }\n  restoreSnapshot(snapshot, _actorScope) {\n    const children = {};\n    const snapshotChildren = snapshot.children;\n    Object.keys(snapshotChildren).forEach(actorId => {\n      const actorData = snapshotChildren[actorId];\n      const childState = actorData.snapshot;\n      const src = actorData.src;\n      const logic = typeof src === 'string' ? guards_dist_xstateGuards.resolveReferencedActor(this, src) : src;\n      if (!logic) {\n        return;\n      }\n      const actorRef = guards_dist_xstateGuards.createActor(logic, {\n        id: actorId,\n        parent: _actorScope.self,\n        syncSnapshot: actorData.syncSnapshot,\n        snapshot: childState,\n        src,\n        systemId: actorData.systemId\n      });\n      children[actorId] = actorRef;\n    });\n    function resolveHistoryReferencedState(root, referenced) {\n      if (referenced instanceof StateNode) {\n        return referenced;\n      }\n      try {\n        return root.machine.getStateNodeById(referenced.id);\n      } catch {\n      }\n    }\n    function reviveHistoryValue(root, historyValue) {\n      if (!historyValue || typeof historyValue !== 'object') {\n        return {};\n      }\n      const revived = {};\n      for (const key in historyValue) {\n        const arr = historyValue[key];\n        for (const item of arr) {\n          const resolved = resolveHistoryReferencedState(root, item);\n          if (!resolved) {\n            continue;\n          }\n          revived[key] ??= [];\n          revived[key].push(resolved);\n        }\n      }\n      return revived;\n    }\n    const revivedHistoryValue = reviveHistoryValue(this.root, snapshot.historyValue);\n    const restoredSnapshot = guards_dist_xstateGuards.createMachineSnapshot({\n      ...snapshot,\n      children,\n      _nodes: Array.from(guards_dist_xstateGuards.getAllStateNodes(guards_dist_xstateGuards.getStateNodes(this.root, snapshot.value))),\n      historyValue: revivedHistoryValue\n    }, this);\n    const seen = new Set();\n    function reviveContext(contextPart, children) {\n      if (seen.has(contextPart)) {\n        return;\n      }\n      seen.add(contextPart);\n      for (const key in contextPart) {\n        const value = contextPart[key];\n        if (value && typeof value === 'object') {\n          if ('xstate$$type' in value && value.xstate$$type === guards_dist_xstateGuards.$$ACTOR_TYPE) {\n            contextPart[key] = children[value.id];\n            continue;\n          }\n          reviveContext(value, children);\n        }\n      }\n    }\n    reviveContext(restoredSnapshot.context, children);\n    return restoredSnapshot;\n  }\n}\n\n/**\n * Creates a state machine (statechart) with the given configuration.\n *\n * The state machine represents the pure logic of a state machine actor.\n *\n * @example\n *\n * ```ts\n * import { createMachine } from 'xstate';\n *\n * const lightMachine = createMachine({\n *   id: 'light',\n *   initial: 'green',\n *   states: {\n *     green: {\n *       on: {\n *         TIMER: { target: 'yellow' }\n *       }\n *     },\n *     yellow: {\n *       on: {\n *         TIMER: { target: 'red' }\n *       }\n *     },\n *     red: {\n *       on: {\n *         TIMER: { target: 'green' }\n *       }\n *     }\n *   }\n * });\n *\n * const lightActor = createActor(lightMachine);\n * lightActor.start();\n *\n * lightActor.send({ type: 'TIMER' });\n * ```\n *\n * @param config The state machine configuration.\n * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })`\n *   to provide machine implementations instead.\n */\nfunction createMachine(config, implementations) {\n  return new StateMachine(config, implementations);\n}\n\n/** @internal */\nfunction createInertActorScope(actorLogic) {\n  const self = guards_dist_xstateGuards.createActor(actorLogic);\n  const inertActorScope = {\n    self,\n    defer: () => {},\n    id: '',\n    logger: () => {},\n    sessionId: '',\n    stopChild: () => {},\n    system: self.system,\n    emit: () => {},\n    actionExecutor: () => {}\n  };\n  return inertActorScope;\n}\n\n/** @deprecated Use `initialTransition(\u2026)` instead. */\nfunction getInitialSnapshot(actorLogic, ...[input]) {\n  const actorScope = createInertActorScope(actorLogic);\n  return actorLogic.getInitialSnapshot(actorScope, input);\n}\n\n/**\n * Determines the next snapshot for the given `actorLogic` based on the given\n * `snapshot` and `event`.\n *\n * If the `snapshot` is `undefined`, the initial snapshot of the `actorLogic` is\n * used.\n *\n * @deprecated Use `transition(\u2026)` instead.\n * @example\n *\n * ```ts\n * import { getNextSnapshot } from 'xstate';\n * import { trafficLightMachine } from './trafficLightMachine.ts';\n *\n * const nextSnapshot = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   undefined, // snapshot (or initial state if undefined)\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot.value);\n * // => 'yellow'\n *\n * const nextSnapshot2 = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   nextSnapshot, // snapshot\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot2.value);\n * // =>'red'\n * ```\n */\nfunction getNextSnapshot(actorLogic, snapshot, event) {\n  const inertActorScope = createInertActorScope(actorLogic);\n  inertActorScope.self._snapshot = snapshot;\n  return actorLogic.transition(snapshot, event, inertActorScope);\n}\n\n// at the moment we allow extra actors - ones that are not specified by `children`\n// this could be reconsidered in the future\n\nfunction setup({\n  schemas,\n  actors,\n  actions,\n  guards,\n  delays\n}) {\n  return {\n    createMachine: config => createMachine({\n      ...config,\n      schemas\n    }, {\n      actors,\n      actions,\n      guards,\n      delays\n    })\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass SimulatedClock {\n  constructor() {\n    this.timeouts = new Map();\n    this._now = 0;\n    this._id = 0;\n    this._flushing = false;\n    this._flushingInvalidated = false;\n  }\n  now() {\n    return this._now;\n  }\n  getId() {\n    return this._id++;\n  }\n  setTimeout(fn, timeout) {\n    this._flushingInvalidated = this._flushing;\n    const id = this.getId();\n    this.timeouts.set(id, {\n      start: this.now(),\n      timeout,\n      fn\n    });\n    return id;\n  }\n  clearTimeout(id) {\n    this._flushingInvalidated = this._flushing;\n    this.timeouts.delete(id);\n  }\n  set(time) {\n    if (this._now > time) {\n      throw new Error('Unable to travel back in time');\n    }\n    this._now = time;\n    this.flushTimeouts();\n  }\n  flushTimeouts() {\n    if (this._flushing) {\n      this._flushingInvalidated = true;\n      return;\n    }\n    this._flushing = true;\n    const sorted = [...this.timeouts].sort(([_idA, timeoutA], [_idB, timeoutB]) => {\n      const endA = timeoutA.start + timeoutA.timeout;\n      const endB = timeoutB.start + timeoutB.timeout;\n      return endB > endA ? -1 : 1;\n    });\n    for (const [id, timeout] of sorted) {\n      if (this._flushingInvalidated) {\n        this._flushingInvalidated = false;\n        this._flushing = false;\n        this.flushTimeouts();\n        return;\n      }\n      if (this.now() - timeout.start >= timeout.timeout) {\n        this.timeouts.delete(id);\n        timeout.fn.call(null);\n      }\n    }\n    this._flushing = false;\n  }\n  increment(ms) {\n    this._now += ms;\n    this.flushTimeouts();\n  }\n}\n\n/**\n * Returns a promise that resolves to the `output` of the actor when it is done.\n *\n * @example\n *\n * ```ts\n * const machine = createMachine({\n *   // ...\n *   output: {\n *     count: 42\n *   }\n * });\n *\n * const actor = createActor(machine);\n *\n * actor.start();\n *\n * const output = await toPromise(actor);\n *\n * console.log(output);\n * // logs { count: 42 }\n * ```\n */\nfunction toPromise(actor) {\n  return new Promise((resolve, reject) => {\n    actor.subscribe({\n      complete: () => {\n        resolve(actor.getSnapshot().output);\n      },\n      error: reject\n    });\n  });\n}\n\n/**\n * Given actor `logic`, a `snapshot`, and an `event`, returns a tuple of the\n * `nextSnapshot` and `actions` to execute.\n *\n * This is a pure function that does not execute `actions`.\n */\nfunction transition(logic, snapshot, event) {\n  const executableActions = [];\n  const actorScope = createInertActorScope(logic);\n  actorScope.actionExecutor = action => {\n    executableActions.push(action);\n  };\n  const nextSnapshot = logic.transition(snapshot, event, actorScope);\n  return [nextSnapshot, executableActions];\n}\n\n/**\n * Given actor `logic` and optional `input`, returns a tuple of the\n * `nextSnapshot` and `actions` to execute from the initial transition (no\n * previous state).\n *\n * This is a pure function that does not execute `actions`.\n */\nfunction initialTransition(logic, ...[input]) {\n  const executableActions = [];\n  const actorScope = createInertActorScope(logic);\n  actorScope.actionExecutor = action => {\n    executableActions.push(action);\n  };\n  const nextSnapshot = logic.getInitialSnapshot(actorScope, input);\n  return [nextSnapshot, executableActions];\n}\n\nconst defaultWaitForOptions = {\n  timeout: Infinity // much more than 10 seconds\n};\n\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy a\n * predicate, and then resolves with that value. Will throw if the desired state\n * is not reached after an optional timeout. (defaults to Infinity).\n *\n * @example\n *\n * ```js\n * const state = await waitFor(someService, (state) => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value that matches\n *   the condition\n */\nfunction waitFor(actorRef, predicate, options) {\n  const resolvedOptions = {\n    ...defaultWaitForOptions,\n    ...options\n  };\n  return new Promise((res, rej) => {\n    const {\n      signal\n    } = resolvedOptions;\n    if (signal?.aborted) {\n      // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n      rej(signal.reason);\n      return;\n    }\n    let done = false;\n    const handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(() => {\n      dispose();\n      rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));\n    }, resolvedOptions.timeout);\n    const dispose = () => {\n      clearTimeout(handle);\n      done = true;\n      sub?.unsubscribe();\n      if (abortListener) {\n        signal.removeEventListener('abort', abortListener);\n      }\n    };\n    function checkEmitted(emitted) {\n      if (predicate(emitted)) {\n        dispose();\n        res(emitted);\n      }\n    }\n\n    /**\n     * If the `signal` option is provided, this will be the listener for its\n     * `abort` event\n     */\n    let abortListener;\n    // eslint-disable-next-line prefer-const\n    let sub; // avoid TDZ when disposing synchronously\n\n    // See if the current snapshot already matches the predicate\n    checkEmitted(actorRef.getSnapshot());\n    if (done) {\n      return;\n    }\n\n    // only define the `abortListener` if the `signal` option is provided\n    if (signal) {\n      abortListener = () => {\n        dispose();\n        // XState does not \"own\" the signal, so we should reject with its reason (if any)\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        rej(signal.reason);\n      };\n      signal.addEventListener('abort', abortListener);\n    }\n    sub = actorRef.subscribe({\n      next: checkEmitted,\n      error: err => {\n        dispose();\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        rej(err);\n      },\n      complete: () => {\n        dispose();\n        rej(new Error(`Actor terminated without satisfying predicate`));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\n\nexports.createEmptyActor = actors_dist_xstateActors.createEmptyActor;\nexports.fromCallback = actors_dist_xstateActors.fromCallback;\nexports.fromEventObservable = actors_dist_xstateActors.fromEventObservable;\nexports.fromObservable = actors_dist_xstateActors.fromObservable;\nexports.fromPromise = actors_dist_xstateActors.fromPromise;\nexports.fromTransition = actors_dist_xstateActors.fromTransition;\nexports.Actor = guards_dist_xstateGuards.Actor;\nexports.__unsafe_getAllOwnEventDescriptors = guards_dist_xstateGuards.getAllOwnEventDescriptors;\nexports.and = guards_dist_xstateGuards.and;\nexports.cancel = guards_dist_xstateGuards.cancel;\nexports.createActor = guards_dist_xstateGuards.createActor;\nexports.getStateNodes = guards_dist_xstateGuards.getStateNodes;\nexports.interpret = guards_dist_xstateGuards.interpret;\nexports.isMachineSnapshot = guards_dist_xstateGuards.isMachineSnapshot;\nexports.matchesState = guards_dist_xstateGuards.matchesState;\nexports.not = guards_dist_xstateGuards.not;\nexports.or = guards_dist_xstateGuards.or;\nexports.pathToStateValue = guards_dist_xstateGuards.pathToStateValue;\nexports.raise = guards_dist_xstateGuards.raise;\nexports.spawnChild = guards_dist_xstateGuards.spawnChild;\nexports.stateIn = guards_dist_xstateGuards.stateIn;\nexports.stop = guards_dist_xstateGuards.stop;\nexports.stopChild = guards_dist_xstateGuards.stopChild;\nexports.toObserver = guards_dist_xstateGuards.toObserver;\nexports.SpecialTargets = log.SpecialTargets;\nexports.assign = log.assign;\nexports.emit = log.emit;\nexports.enqueueActions = log.enqueueActions;\nexports.forwardTo = log.forwardTo;\nexports.log = log.log;\nexports.sendParent = log.sendParent;\nexports.sendTo = log.sendTo;\nexports.SimulatedClock = SimulatedClock;\nexports.StateMachine = StateMachine;\nexports.StateNode = StateNode;\nexports.assertEvent = assertEvent;\nexports.createMachine = createMachine;\nexports.getInitialSnapshot = getInitialSnapshot;\nexports.getNextSnapshot = getNextSnapshot;\nexports.initialTransition = initialTransition;\nexports.setup = setup;\nexports.toPromise = toPromise;\nexports.transition = transition;\nexports.waitFor = waitFor;\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/.wrangler/tmp/bundle-nZ7DK4/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/.wrangler/tmp/bundle-nZ7DK4/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/.wrangler/tmp/bundle-nZ7DK4/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/zyahav/Documents/my_adk_project/WorkerFlow/video-analysis-agent/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { Hono } from 'hono';\n\n// Import agent.json as a static asset or use import assertion (Node 20+ and ESM)\nimport agentInfo from '../agent.json' assert { type: 'json' };\nimport { testMachine } from './machine.js';\nimport { createActor } from 'xstate';\n\nconst app = new Hono();\n\napp.get('/agent-info', (c) => {\n\treturn c.json(agentInfo);\n});\n\napp.get('/test-machine', (c) => {\n\tconst actor = createActor(testMachine);\n\tactor.start();\n\tactor.send({ type: 'START' });\n\t// Immediately return the current state (likely 'running')\n\treturn c.json({ state: actor.getSnapshot().value });\n});\n\n// Add more routes as needed\n\nexport default app;\n", "// src/index.ts\nimport { Hono } from \"./hono.js\";\nexport {\n  Hono\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setHeaders = (headers, map = {}) => {\n  for (const key of Object.keys(map)) {\n    headers.set(key, map[key]);\n  }\n  return headers;\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status = 200;\n  #executionCtx;\n  #headers;\n  #preparedHeaders;\n  #res;\n  #isFresh = true;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    this.#isFresh = false;\n    return this.#res ||= new Response(\"404 Not Found\", { status: 404 });\n  }\n  set res(_res) {\n    this.#isFresh = false;\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    if (value === void 0) {\n      if (this.#headers) {\n        this.#headers.delete(name);\n      } else if (this.#preparedHeaders) {\n        delete this.#preparedHeaders[name.toLocaleLowerCase()];\n      }\n      if (this.finalized) {\n        this.res.headers.delete(name);\n      }\n      return;\n    }\n    if (options?.append) {\n      if (!this.#headers) {\n        this.#isFresh = false;\n        this.#headers = new Headers(this.#preparedHeaders);\n        this.#preparedHeaders = {};\n      }\n      this.#headers.append(name, value);\n    } else {\n      if (this.#headers) {\n        this.#headers.set(name, value);\n      } else {\n        this.#preparedHeaders ??= {};\n        this.#preparedHeaders[name.toLowerCase()] = value;\n      }\n    }\n    if (this.finalized) {\n      if (options?.append) {\n        this.res.headers.append(name, value);\n      } else {\n        this.res.headers.set(name, value);\n      }\n    }\n  };\n  status = (status) => {\n    this.#isFresh = false;\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    if (this.#isFresh && !headers && !arg && this.#status === 200) {\n      return new Response(data, {\n        headers: this.#preparedHeaders\n      });\n    }\n    if (arg && typeof arg !== \"number\") {\n      const header = new Headers(arg.headers);\n      if (this.#headers) {\n        this.#headers.forEach((v, k) => {\n          if (k === \"set-cookie\") {\n            header.append(k, v);\n          } else {\n            header.set(k, v);\n          }\n        });\n      }\n      const headers2 = setHeaders(header, this.#preparedHeaders);\n      return new Response(data, {\n        headers: headers2,\n        status: arg.status ?? this.#status\n      });\n    }\n    const status = typeof arg === \"number\" ? arg : this.#status;\n    this.#preparedHeaders ??= {};\n    this.#headers ??= new Headers();\n    setHeaders(this.#headers, this.#preparedHeaders);\n    if (this.#res) {\n      this.#res.headers.forEach((v, k) => {\n        if (k === \"set-cookie\") {\n          this.#headers?.append(k, v);\n        } else {\n          this.#headers?.set(k, v);\n        }\n      });\n      setHeaders(this.#headers, this.#preparedHeaders);\n    }\n    headers ??= {};\n    for (const [k, v] of Object.entries(headers)) {\n      if (typeof v === \"string\") {\n        this.#headers.set(k, v);\n      } else {\n        this.#headers.delete(k);\n        for (const v2 of v) {\n          this.#headers.append(k, v2);\n        }\n      }\n    }\n    return new Response(data, {\n      status,\n      headers: this.#headers\n    });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => {\n    return typeof arg === \"number\" ? this.#newResponse(data, arg, headers) : this.#newResponse(data, arg);\n  };\n  text = (text, arg, headers) => {\n    if (!this.#preparedHeaders) {\n      if (this.#isFresh && !headers && !arg) {\n        return new Response(text);\n      }\n      this.#preparedHeaders = {};\n    }\n    this.#preparedHeaders[\"content-type\"] = TEXT_PLAIN;\n    if (typeof arg === \"number\") {\n      return this.#newResponse(text, arg, headers);\n    }\n    return this.#newResponse(text, arg);\n  };\n  json = (object, arg, headers) => {\n    const body = JSON.stringify(object);\n    this.#preparedHeaders ??= {};\n    this.#preparedHeaders[\"content-type\"] = \"application/json\";\n    return typeof arg === \"number\" ? this.#newResponse(body, arg, headers) : this.#newResponse(body, arg);\n  };\n  html = (html, arg, headers) => {\n    this.#preparedHeaders ??= {};\n    this.#preparedHeaders[\"content-type\"] = \"text/html; charset=UTF-8\";\n    if (typeof html === \"object\") {\n      return resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then((html2) => {\n        return typeof arg === \"number\" ? this.#newResponse(html2, arg, headers) : this.#newResponse(html2, arg);\n      });\n    }\n    return typeof arg === \"number\" ? this.#newResponse(html, arg, headers) : this.#newResponse(html, arg);\n  };\n  redirect = (location, status) => {\n    this.#headers ??= new Headers();\n    this.#headers.set(\"Location\", String(location));\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/request.ts\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"json\");\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    form[key] = value;\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\"/\", 8);\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? decodeURIComponent_(value) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/router/reg-exp-router/index.ts\nimport { RegExpRouter } from \"./router.js\";\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/smart-router/index.ts\nimport { SmartRouter } from \"./router.js\";\nexport {\n  SmartRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/index.ts\nimport { TrieRouter } from \"./router.js\";\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (Object.keys(curNode.#children).includes(key)) {\n        curNode = curNode.#children[key];\n        const pattern2 = getPattern(p, nextP);\n        if (pattern2) {\n          possibleKeys.push(pattern2[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    const m = /* @__PURE__ */ Object.create(null);\n    const handlerSet = {\n      handler,\n      possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n      score: this.#order\n    };\n    m[method] = handlerSet;\n    curNode.#methods.push(m);\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          if (part === \"\") {\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "{\n    \"name\": \"video-analysis-agent\",\n    \"description\": \"Orchestrates video analysis workflows using XState and @xstate/store. Simulates each step with a 1-second delay.\",\n    \"instructions\": [\n        \"Use XState v5+ and @xstate/store for all state management.\",\n        \"Each workflow step must simulate a 1-second delay.\",\n        \"Expose a /agent-info endpoint that returns this file as JSON.\"\n    ],\n    \"endpoints\": [\n        {\n            \"path\": \"/agent-info\",\n            \"method\": \"GET\",\n            \"description\": \"Returns this agent's description and instructions.\"\n        }\n    ]\n}", "import { createMachine } from 'xstate';\n\nexport const testMachine = createMachine({\n\tid: 'test',\n\tinitial: 'idle',\n\tstates: {\n\t\tidle: {\n\t\t\ton: {\n\t\t\t\tSTART: 'running',\n\t\t\t},\n\t\t},\n\t\trunning: {\n\t\t\tafter: {\n\t\t\t\t1000: 'done', // 1-second delay\n\t\t\t},\n\t\t},\n\t\tdone: {\n\t\t\ttype: 'final',\n\t\t},\n\t},\n});\n", "export {\n  Actor,\n  SimulatedClock,\n  SpecialTargets,\n  StateMachine,\n  StateNode,\n  __unsafe_getAllOwnEventDescriptors,\n  and,\n  assertEvent,\n  assign,\n  cancel,\n  createActor,\n  createEmptyActor,\n  createMachine,\n  emit,\n  enqueueActions,\n  forwardTo,\n  fromCallback,\n  fromEventObservable,\n  fromObservable,\n  fromPromise,\n  fromTransition,\n  getInitialSnapshot,\n  getNextSnapshot,\n  getStateNodes,\n  initialTransition,\n  interpret,\n  isMachineSnapshot,\n  log,\n  matchesState,\n  not,\n  or,\n  pathToStateValue,\n  raise,\n  sendParent,\n  sendTo,\n  setup,\n  spawnChild,\n  stateIn,\n  stop,\n  stopChild,\n  toObserver,\n  toPromise,\n  transition,\n  waitFor\n} from \"./xstate.cjs.js\";\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["matchesState", "isMachineSnapshot", "pathToStateValue", "self", "toObserver", "errorHandler", "ProcessingStatus", "Actor", "err", "createActor", "interpret", "cancel", "spawnChild", "stopChild", "stop", "stateIn", "not", "and", "or", "raise", "transition", "getStateNodes", "actions", "event", "toJSON", "fromTransition", "transition", "fromCallback", "self", "emit", "fromObservable", "fromEventObservable", "fromPromise", "createEmptyActor", "assign", "emit", "SpecialTargets", "sendTo", "sendParent", "forwardTo", "enqueue", "args", "enqueueActions", "log", "log", "assertEvent", "StateNode", "t", "transition", "StateMachine", "self", "children", "createMachine", "getInitialSnapshot", "getNextSnapshot", "setup", "SimulatedClock", "toPromise", "initialTransition", "waitFor", "raw", "app", "Node", "Node", "Hono", "Hono"]
}
